from Graph import Graph
from Algorithm import Algorithm
import time

class GreedyAlgorithm(Algorithm):
    def solve(self, start_point=0):
        path = [start_point]
        total_dist = 0
        n = self.graph.number_of_points
        now = start_point
        start_time = time.time()
        for i in range(n - 1):
            possible_moves = self.graph.get_adjoining_points(now)
            min_dist_point = (-1, -1)
            for move in possible_moves:
                if move[0] not in path:
                    if min_dist_point[0] == -1:
                        min_dist_point = move
                    elif min_dist_point[1] > move[1]:
                        min_dist_point = move
            total_dist += min_dist_point[1]
            now = min_dist_point[0]
            path.append(min_dist_point[0])
        path.append(start_point)
        total_dist += self.graph.calculate_distance(path[-2], path[-1])
        end_time = time.time()
        totat_time = end_time - start_time
        return path, total_dist, totat_time

# 1644498579.8804176

if __name__ == "__main__":
    # points = [(10, 10, 10), (9, 1, 10), (3, 5, 10), (5, 5, 10), (9, 9, 2), (1, 1, 5), (5, 9, 6), (8, 15, 8), (9, 5, 2)]
    points = [(91.7311459346491, 15.342820268851298, 77.53479746150663), (62.595798272237445, 94.58617578743547, 99.76370379060849), (74.32021743917898, 56.6362601791274, 29.58346499534801), (36.12229467034849, 47.75829366597794, 84.95218127238945), (0.9613939628796975, 40.81584061580516, 77.34242626106106), (87.16464560697416, 12.903054589685581, 13.084325187436862), (70.18511661550662, 71.42918835363741, 57.97018380425412), (16.159047192582587, 93.80791835406649, 51.77476525745684), (75.68100170077795, 83.46932150606358, 35.24274070868005), (76.49678612764977, 79.33331499612642, 85.75161288966933), (9.128753146533208, 86.22003390470118, 28.039898275495723), (45.86776165196835, 32.588278037569864, 50.02916622882233), (12.58025051971785, 25.61088225221776, 0.9660423520892469), (80.37192050955042, 90.20015699100932, 6.168015966092987), (55.65352854222125, 61.072486581627636, 95.20969582429714), (67.2337845583764, 4.82705217854511, 13.367546244563389), (24.26393457790823, 35.93678283168128, 50.99531022401784), (52.013751258468425, 36.61358585648403, 40.51360995569455), (81.72858167732934, 73.98030635033679, 84.35847992012513), (9.373415583680867, 92.35302614484439, 42.951974600052786), (65.73355891122839, 19.09766766823121, 3.6378746628049075), (84.18672557499427, 41.17215198314664, 7.864123283782032), (45.922489302436546, 88.70769938729741, 19.137911376170603), (18.246282347494436, 10.10243270408795, 22.34060404278113), (63.52286031137283, 4.842791078971153, 69.72630454510089), (21.353827980658522, 10.979107156744494, 98.42176479763371), (42.064685225405675, 26.059234649235552, 60.392123963783526), (12.624596891592788, 14.371580899234893, 81.15915767830056), (26.684769194697864, 16.51702279504391, 46.2655877031674), (32.83621222526592, 3.759246766932034, 77.82822806911935), (19.58741806516725, 58.398418907367486, 83.30120538805402), (35.5590273452646, 11.305304047980492, 2.9175746004953207), (52.94645066291373, 89.02542101901997, 90.70155263130502), (31.820067796642004, 60.196244125375344, 64.71304819339824), (72.99489843193115, 44.34248331032842, 7.45812465825254), (6.358766342434096, 63.83955241344738, 7.8963548650051285), (2.056932280996193, 28.43510634094779, 34.84738850974377), (98.26392818443607, 29.35541575144799, 46.59418235980066), (53.40201691411819, 36.33661538807981, 29.135273868591284), (33.50986881993408, 53.04054129071377, 54.30528385740385), (9.96477401653334, 29.256770850166625, 20.876531458924962), (83.34886780793163, 30.105812959314616, 71.06605926064599), (98.88608728909477, 73.16913694337688, 49.79807914224976), (87.89200760228317, 73.62082341406177, 1.4393478344569166), (23.3083609558999, 97.04783605583948, 60.314720194402426), (18.16948409500496, 91.42043119883677, 37.48795578996602), (91.36171496447287, 25.498050296647, 36.19746021573466), (2.793964593699494, 54.303805956236374, 69.19203821504212), (27.458550236345737, 16.70103035870546, 96.24534909179019), (45.22411357243612, 5.9191234849254375, 89.53341625046613)]

    graph = Graph(*points)
    algorithm = GreedyAlgorithm(graph)
    start = 1 # 9, 1
    path, dist, tot_time = algorithm.solve(start)

    print(" -> ".join([str(i) for i in path]))
    print(dist)
    print(tot_time)

    graph.visualize_path_plotly(path)